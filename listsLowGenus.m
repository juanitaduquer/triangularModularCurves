/* ************************************
 Genus 0
************************************ */

genus0 := [
    [ 2, 4, 6, 5, 5, -1 ], [ 2, 3, 8, 7, 7, -1 ], [ 2, 4, 6, 7, 7, -1 ], [ 3, 3, 4, 7, 7, 1 ], [ 2, 8, 8, 3, 9, -1 ],
    [ 4, 4, 4, 3, 9, 1 ], [ 2, 3, 10, 11, 11, -1 ], [ 2, 4, 5, 11, 11, -1 ], [ 2, 5, 10, 11, 11, -1 ], [ 2, 3, 7, 13, 13, 1 ],
    [ 2, 4, 12, 13, 13, -1 ], [ 2, 6, 6, 13, 13, 1 ], [ 3, 3, 6, 13, 13, 1 ], [ 2, 3, 8, 17, 17, 1 ], [ 2, 4, 8, 17, 17, 1 ],
    [ 2, 3, 9, 19, 19, 1 ], [ 2, 3, 18, 19, 19, -1 ], [ 2, 3, 12, 5, 25, 1 ], [ 3, 3, 4, 5, 25, 1 ], [ 2, 3, 7, 29, 29, 1 ],
    [ 2, 3, 10, 31, 31, -1 ], [ 2, 3, 9, 37, 37, 1 ], [ 2, 4, 5, 41, 41, 1 ], [ 2, 3, 7, 43, 43, 1 ]
];

NewList0 := [
    [ 2, 4, 6, 5, 5, -1 ], [ 2, 3, 8, 7, 7, -1 ], [ 2, 4, 6, 7, 7, -1 ], [ 3, 3, 4, 7, 7, 1 ], [ 3, 3, 7, 7, 7, 1 ],
    [ 2, 8, 8, 3, 9, -1 ], [ 3, 3, 4, 3, 9, 1 ], [ 4, 4, 4, 3, 9, 1 ], [ 2, 3, 10, 11, 11, -1 ], [ 2, 4, 5, 11, 11, -1 ],
    [ 2, 5, 10, 11, 11, -1 ], [ 2, 3, 7, 13, 13, 1 ], [ 2, 3, 13, 13, 13, 1 ], [ 2, 4, 12, 13, 13, -1 ], [ 2, 6, 6, 13, 13, 1 ],
    [ 3, 3, 6, 13, 13, 1 ], [ 2, 3, 8, 17, 17, 1 ], [ 2, 4, 8, 17, 17, 1 ], [ 2, 3, 9, 19, 19, 1 ], [ 2, 3, 18, 19, 19, -1 ],
    [ 2, 3, 12, 5, 25, 1 ], [ 2, 4, 5, 5, 25, 1 ], [ 3, 3, 4, 5, 25, 1 ], [ 2, 3, 7, 29, 29, 1 ], [ 2, 3, 10, 31, 31, -1 ],
    [ 2, 3, 9, 37, 37, 1 ], [ 2, 4, 5, 41, 41, 1 ], [ 2, 3, 7, 43, 43, 1 ], [ 2, 3, 7, 7, 49, -1 ]];

Problem0 := [
    [ 4, 4, 4, 3 ], [ 2, 4, 6, 5 ], [ 3, 3, 4, 5 ], [ 2, 3, 8, 7 ], [ 2, 4, 6, 7 ], [ 2, 6, 6, 7 ],
    [ 3, 3, 4, 7 ], [ 2, 4, 8, 3 ], [ 2, 4, 9, 3 ], [ 2, 5, 9, 3 ], [ 2, 8, 8, 3 ], [ 4, 4, 4, 3 ],
    [ 2, 3, 10, 11 ], [ 2, 4, 5, 11 ], [ 2, 5, 10, 11 ], [ 2, 3, 7, 13 ], [ 2, 3, 12, 13 ], [ 2, 4, 6, 13 ],
    [ 2, 4, 12, 13 ], [ 2, 6, 6, 13 ], [ 3, 3, 6, 13 ], [ 2, 3, 8, 17 ], [ 2, 4, 8, 17 ], [ 2, 3, 9, 19 ],
    [ 2, 3, 18, 19 ], [ 2, 3, 8, 5 ], [ 2, 3, 12, 5 ], [ 2, 4, 6, 5 ], [ 3, 3, 4, 5 ], [ 2, 4, 9, 3 ],
    [ 2, 3, 7, 29 ], [ 2, 3, 10, 31 ], [ 2, 3, 9, 37 ], [ 2, 4, 5, 41 ], [ 2, 3, 7, 43 ], [ 2, 3, 8, 7 ],
    [ 2, 4, 6, 7 ], [ 3, 3, 4, 7 ]
];

for t in Problem0 do
  print t;
  i := 1;
  done := false;
  while i le 3 and not done do
    pass := PassportRepresentatives(PSL(2,t[4]^i):abc:=[t[1],t[2],t[3]]);
    if #pass ne 0 then
      print "yay", t, i;
      done := true;
    end if;
    i +:= 1;
  end while;
  while i le 3 and not done do
    pass := PassportRepresentatives(PGL(2,t[4]^i):abc:=[t[1],t[2],t[3]]);
    if #pass ne 0 then
      print "yay", t, i;
      done := true;
    end if;
    i +:= 1;
  end while;
end for;

// triple,p,q,pgl,arithmetic,degree(E),disc(E),bound_Field
[
    [ 2, 3, 7, 13, 13, 1, 1, 3, 49, 3 ], [ 2, 3, 7, 29, 29, 1, 1, 3, 49, 3 ], [ 2, 3, 7, 43, 43, 1, 1, 3, 49, 3 ],
    [ 2, 3, 8, 7, 7, -1, 1, 2, 8, 2 ], [ 2, 3, 8, 17, 17, 1, 1, 2, 8, 2 ], [ 2, 3, 9, 19, 19, 1, 1, 3, 81, 3 ],
    [ 2, 3, 9, 37, 37, 1, 1, 3, 81, 3 ], [ 2, 3, 10, 11, 11, -1, 1, 2, 5, 2 ], [ 2, 3, 10, 31, 31, -1, 1, 2, 5, 2 ],
    [ 2, 3, 12, 5, 25, 1, 1, 2, 12, 1 ], [ 2, 3, 18, 19, 19, -1, 1, 3, 81, 3 ], [ 2, 4, 5, 11, 11, -1, 1, 2, 5, 2 ],
    [ 2, 4, 5, 41, 41, 1, 1, 2, 5, 2 ], [ 2, 4, 6, 5, 5, -1, 1, 1, 1, 1 ], [ 2, 4, 6, 7, 7, -1, 1, 1, 1, 1 ],
    [ 2, 4, 8, 17, 17, 1, 1, 2, 8, 2 ], [ 2, 4, 12, 13, 13, -1, 1, 2, 12, 2 ], [ 2, 5, 10, 11, 11, -1, 1, 2, 5, 2 ],
    [ 2, 6, 6, 13, 13, 1, 1, 1, 1, 1 ], [ 2, 8, 8, 3, 9, -1, 1, 2, 8, 1 ], [ 3, 3, 4, 7, 7, 1, 1, 2, 8, 2 ],
    [ 3, 3, 4, 5, 25, 1, 1, 2, 8, 1 ], [ 3, 3, 6, 13, 13, 1, 1, 2, 12, 2 ], [ 4, 4, 4, 3, 9, 1, 1, 2, 32, 1 ]
];

/* ************************************
 Genus 1
************************************ */

genus1 := [
    [ 2, 6, 6, 5, 5, -1 ],[ 3, 4, 6, 5, 5, -1 ],[ 2, 4, 8, 7, 7, -1 ],[ 3, 6, 8, 7, 7, -1 ],[ 4, 6, 6, 7, 7, -1 ],
    [ 2, 8, 10, 3, 9, -1 ],[ 4, 4, 5, 3, 9, 1 ],[ 2, 3, 12, 11, 11, -1 ],[ 2, 4, 6, 11, 11, -1 ],[ 2, 5, 6, 11, 11, 1 ],
    [ 2, 5, 12, 11, 11, -1 ],[ 2, 6, 10, 11, 11, -1 ],[ 2, 4, 14, 13, 13, -1 ],[ 2, 6, 7, 13, 13, 1 ],[ 2, 12, 12, 13, 13, -1 ],
    [ 3, 3, 7, 13, 13, 1 ],[ 4, 4, 6, 13, 13, -1 ],[ 2, 3, 9, 17, 17, 1 ],[ 2, 4, 9, 17, 17, 1 ],[ 2, 8, 8, 17, 17, 1 ],
    [ 3, 3, 4, 17, 17, 1 ],[ 4, 4, 4, 17, 17, 1 ],[ 2, 3, 10, 19, 19, 1 ],[ 2, 3, 20, 19, 19, -1 ],[ 2, 4, 5, 19, 19, -1 ],
    [ 2, 4, 9, 19, 19, -1 ],[ 2, 5, 6, 19, 19, -1 ],[ 2, 6, 9, 19, 19, -1 ],[ 3, 3, 9, 19, 19, 1 ],[ 2, 3, 8, 23, 23, -1 ],
    [ 2, 3, 11, 23, 23, 1 ],[ 2, 3, 22, 23, 23, -1 ],[ 2, 3, 13, 5, 25, 1 ],[ 2, 4, 12, 5, 25, 1 ],[ 3, 3, 6, 5, 25, 1 ],
    [ 2, 3, 14, 29, 29, 1 ],[ 2, 4, 6, 29, 29, -1 ],[ 2, 3, 8, 31, 31, 1 ],[ 2, 3, 15, 31, 31, 1 ],[ 2, 3, 30, 31, 31, -1 ],
    [ 2, 4, 5, 31, 31, 1 ],[ 2, 4, 6, 31, 31, -1 ],[ 2, 5, 6, 31, 31, -1 ],[ 3, 3, 4, 31, 31, 1 ],[ 2, 3, 18, 37, 37, 1 ],
    [ 2, 3, 7, 41, 41, 1 ],[ 2, 3, 10, 41, 41, 1 ],[ 2, 3, 14, 43, 43, -1 ],[ 2, 3, 10, 61, 61, 1 ],[ 2, 3, 7, 71, 71, 1 ],
    [ 2, 3, 9, 73, 73, 1 ],[ 2, 3, 7, 97, 97, 1 ],[ 2, 3, 8, 97, 97, 1 ],[ 2, 3, 7, 113, 113, 1 ],[ 2, 3, 7, 127, 127, 1 ]
];

NewList1 := [
    [ 2, 6, 6, 5, 5, -1 ], [ 3, 4, 6, 5, 5, -1 ], [ 2, 4, 7, 7, 7, 1 ], [ 2, 4, 8, 7, 7, -1 ],
    [ 2, 7, 7, 7, 7, 1 ], [ 2, 7, 8, 7, 7, -1 ], [ 3, 6, 8, 7, 7, -1 ], [ 3, 7, 7, 7, 7, 1 ],
    [ 4, 6, 6, 7, 7, -1 ], [ 2, 8, 10, 3, 9, -1 ], [ 4, 4, 5, 3, 9, 1 ], [ 2, 3, 11, 11, 11, 1 ],
    [ 2, 3, 12, 11, 11, -1 ], [ 2, 4, 6, 11, 11, -1 ], [ 2, 4, 11, 11, 11, -1 ], [ 2, 5, 6, 11, 11, 1 ],
    [ 2, 5, 12, 11, 11, -1 ], [ 2, 6, 10, 11, 11, -1 ], [ 2, 4, 14, 13, 13, -1 ], [ 2, 6, 7, 13, 13, 1 ],
    [ 2, 6, 13, 13, 13, 1 ], [ 2, 12, 12, 13, 13, -1 ], [ 3, 3, 7, 13, 13, 1 ], [ 3, 3, 13, 13, 13, 1 ],
    [ 4, 4, 6, 13, 13, -1 ], [ 2, 3, 9, 17, 17, 1 ], [ 2, 3, 17, 17, 17, 1 ], [ 2, 4, 9, 17, 17, 1 ],
    [ 2, 4, 17, 17, 17, 1 ], [ 2, 8, 8, 17, 17, 1 ], [ 3, 3, 4, 17, 17, 1 ], [ 4, 4, 4, 17, 17, 1 ],
    [ 2, 3, 10, 19, 19, 1 ], [ 2, 3, 19, 19, 19, 1 ], [ 2, 3, 20, 19, 19, -1 ], [ 2, 4, 5, 19, 19, -1 ],
    [ 2, 4, 9, 19, 19, -1 ], [ 2, 5, 6, 19, 19, -1 ], [ 2, 6, 9, 19, 19, -1 ], [ 3, 3, 9, 19, 19, 1 ],
    [ 2, 3, 8, 23, 23, -1 ], [ 2, 3, 11, 23, 23, 1 ], [ 2, 3, 22, 23, 23, -1 ], [ 2, 3, 13, 5, 25, 1 ],
    [ 2, 4, 12, 5, 25, 1 ], [ 3, 3, 6, 5, 25, 1 ], [ 2, 3, 7, 3, 27, 1 ], [ 2, 3, 14, 29, 29, 1 ],
    [ 2, 4, 6, 29, 29, -1 ], [ 2, 3, 8, 31, 31, 1 ], [ 2, 3, 15, 31, 31, 1 ], [ 2, 3, 30, 31, 31, -1 ],
    [ 2, 4, 5, 31, 31, 1 ], [ 2, 4, 6, 31, 31, -1 ], [ 2, 5, 6, 31, 31, -1 ], [ 3, 3, 4, 31, 31, 1 ],
    [ 2, 3, 18, 37, 37, 1 ], [ 2, 3, 7, 41, 41, 1 ], [ 2, 3, 10, 41, 41, 1 ], [ 2, 3, 14, 43, 43, -1 ],
    [ 2, 3, 10, 61, 61, 1 ], [ 2, 3, 7, 71, 71, 1 ], [ 2, 3, 9, 73, 73, 1 ], [ 2, 3, 7, 97, 97, 1 ],
    [ 2, 3, 8, 97, 97, 1 ], [ 2, 3, 7, 113, 113, 1 ], [ 2, 3, 7, 127, 127, 1 ]
];

problem1 := [
    [ 4, 4, 4, 3 ], [ 2, 4, 6, 5 ], [ 3, 3, 4, 5 ], [ 2, 3, 8, 7 ], [ 2, 4, 6, 7 ], [ 2, 6, 6, 7 ],
    [ 3, 3, 4, 7 ], [ 2, 4, 8, 3 ], [ 2, 4, 9, 3 ], [ 2, 5, 9, 3 ], [ 2, 8, 8, 3 ], [ 4, 4, 4, 3 ],
    [ 2, 3, 10, 11 ], [ 2, 4, 5, 11 ], [ 2, 5, 10, 11 ], [ 2, 3, 7, 13 ], [ 2, 3, 12, 13 ], [ 2, 4, 6, 13 ],
    [ 2, 4, 12, 13 ], [ 2, 6, 6, 13 ], [ 3, 3, 6, 13 ], [ 2, 3, 8, 17 ], [ 2, 4, 8, 17 ], [ 2, 3, 9, 19 ],
    [ 2, 3, 18, 19 ], [ 2, 3, 8, 5 ], [ 2, 3, 12, 5 ], [ 2, 4, 6, 5 ], [ 3, 3, 4, 5 ], [ 2, 4, 9, 3 ],
    [ 2, 3, 7, 29 ], [ 2, 3, 10, 31 ], [ 2, 3, 9, 37 ], [ 2, 4, 5, 41 ], [ 2, 3, 7, 43 ], [ 2, 3, 8, 7 ],
    [ 2, 4, 6, 7 ], [ 3, 3, 4, 7 ], [ 2, 4, 5, 11 ], [ 3, 3, 4, 5 ], [ 2, 3, 7, 13 ]
];
lambda := function(s)
  return RootOfUnity(s)+(1/RootOfUnity(s));
end function;

e_description := function(t)
// Input: a hyperbolic projective triple [a,b,c] and an integer bound
// Output: q leq bound (if possible) such that G is as in Theorem A (Clark&Voight)
  a:=t[1];
  b:=t[2];
  c:=t[3];
  E := SplittingField([MinimalPolynomial(lambda(a)),MinimalPolynomial(lambda(b)),MinimalPolynomial(lambda(c)),MinimalPolynomial(lambda(2*a)*lambda(2*b)*lambda(2*c))]);
  Append(~t,Degree(E));
  Append(~t,Discriminant(E));
  return t;
end function;

add_e := function(L)
  new := [];
  for t in L do
    Append(~new,e_description(t));
  end for;
  return new;
end function;

add_bound := function(L)
  new:=[];
  for t in L do
    new_t:=t;
    if t[6] eq 1 then
      Append(~new_t,#(PassportRepresentatives(PSL(2,t[5]):abc:=[t[1],t[2],t[3]])[1][2]));
    elif t[6] eq -1 then
      Append(~new_t,#(PassportRepresentatives(PGL(2,t[5]):abc:=[t[1],t[2],t[3]])[1][2]));
    end if;
    Append(~new,new_t);
  end for;
  return new;
end function;


tex_format := function(L)
  st:="";
  for t in L do
    st := st cat "\\\\\\hline" cat "(" cat IntegerToString(Floor(t[1])) cat ", " cat IntegerToString(Floor(t[2])) cat ", " cat
    IntegerToString(Floor(t[3])) cat ") & " cat IntegerToString(Floor(t[4])) cat "& " cat IntegerToString(Floor(t[5])) cat "& " cat IntegerToString(Floor(t[6]))
    cat "& " cat IntegerToString(Floor(t[7])) cat "& " cat IntegerToString(Floor(t[8]))cat "& " cat IntegerToString(Floor(t[9]))cat "& " cat IntegerToString(Floor(t[10]));
  end for;
  return st;
end function;

lookForX := function(list)
  works := [];
  for t in genus0 do
    if t[6] eq 1 then
      pass := PassportRepresentatives(PSL(2,t[5]):abc:=[t[1],t[2],t[3]]);
    else
      pass := PassportRepresentatives(PGL(2,t[5]):abc:=[t[1],t[2],t[3]]);
    end if;
    sigma := pass[1][2][1];
    Gamma := TriangleSubgroup(sigma);
    try
      X,phi:=BelyiMap(Gamma:prec:=40,Al:="RecognizeSeries");
      print "Appended", t;
      print "*******************************************************";
      Append(~works,<t,X,phi>);
    catch e
      print "*******************************************************";
      print "no luck with", t;
      print "*******************************************************";
    end try;
  end for;
  return works;
end function;

/* Things that work:

pass:=PassportRepresentatives(PSL(2,7):abc:=[3,3,4]);
X,phi:=BelyiMap(Gamma:prec:=100);

Curve over Number Field with defining polynomial $.1^4 - 2*$.1^3 + $.1^2 - 2*$.1
    + 1 over the Rational Field defined by 0

pass:=PassportRepresentatives(PSL(2,9):abc:=[4,4,4]);
Curve over Number Field with defining polynomial $.1^2 - $.1 + 1 over the
Rational Field defined by 0
