
lambda := function(s)
  return RootOfUnity(s)+(1/RootOfUnity(s));
end function;

eDescription := function(t)
// Input: a hyperbolic projective triple [a,b,c] and an integer bound
// Output: q leq bound (if possible) such that G is as in Theorem A (Clark&Voight)
  a:=t[1];
  b:=t[2];
  c:=t[3];
  E := SplittingField([MinimalPolynomial(lambda(a)),MinimalPolynomial(lambda(b)),MinimalPolynomial(lambda(c)),MinimalPolynomial(lambda(2*a)*lambda(2*b)*lambda(2*c))]);
  Append(~t,Degree(E));
  Append(~t,Discriminant(E));
  return t;
end function;

poly := function(a,b,c)
  R<x>:=PolynomialRing(Rationals());
  E := SplittingField([MinimalPolynomial(lambda(a)),MinimalPolynomial(lambda(b)),MinimalPolynomial(lambda(c)),MinimalPolynomial(lambda(2*a)*lambda(2*b)*lambda(2*c))]);
  return Evaluate(DefiningPolynomial(E),x);
end function;

addE := function(L)
  new := [];
  for t in L do
    Append(~new,eDescription(t));
  end for;
  return new;
end function;

addBound := function(L)
  new:=[];
  for t in L do
    new_t:=t;
    if t[6] eq 1 then
      Append(~new_t,#(PassportRepresentatives(PSL(2,t[5]):abc:=[t[1],t[2],t[3]])[1][2]));
    elif t[6] eq -1 then
      Append(~new_t,#(PassportRepresentatives(PGL(2,t[5]):abc:=[t[1],t[2],t[3]])[1][2]));
    end if;
    Append(~new,new_t);
  end for;
  return new;
end function;


texFormat := function(L)
  st:="";
  for t in L do
    st := st cat "\\\\\\hline" cat "(" cat IntegerToString(Floor(t[1])) cat ", " cat IntegerToString(Floor(t[2])) cat ", " cat
    IntegerToString(Floor(t[3])) cat ")";
    for i in [4..#t] do
      st := st cat " & " cat IntegerToString(Floor(t[i]));
    end for;
  end for;
  return st;
end function;

lexOrderABC := function(L)
  N:=[];
  for t in L do
    Append(~N,[t[1],t[2],t[3],t[5],t[4],t[6]]);
  end for;
  N:=Sort(N);
  M:=[];
  for t in N do
    Append(~M,[t[1],t[2],t[3],t[5],t[4],t[6]]);
  end for;
  return M;
end function;

lexOrderQ := function(L)
  N:=[];
  for t in L do
    Append(~N,[t[5],t[1],t[2],t[3],t[4],t[6]]);
  end for;
  N:=Sort(N);
  M:=[];
  for t in N do
    Append(~M,[t[2],t[3],t[4],t[5],t[1],t[6]]);
  end for;
  return M;
end function;

arithmetic1 := [
  [2, 3, 7], [2, 3, 8], [2, 3, 9], [2, 3, 10], [2, 3, 11], [2, 3, 12], [2, 3, 14], [2, 3, 16], [2, 3, 18],
  [2, 3, 24], [2, 3, 30], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 10], [2, 4, 12], [2, 4, 18],
  [2, 5, 5], [2, 5, 6], [2, 5, 8], [2, 5, 10], [2, 5, 20], [2, 5, 30], [2, 6, 6], [2, 6, 8], [2, 6, 12],
  [2, 7, 7], [2, 7, 14], [2, 8, 8], [2, 8, 16], [2, 9, 18], [2, 10, 10], [2, 12, 12], [2, 12, 24], [2, 15, 30],
  [2, 18, 18], [3, 3, 4], [3, 3, 5], [3, 3, 6], [3, 3, 7], [3, 3, 8], [3, 3, 9], [3, 3, 12], [3, 3, 15],
  [3, 4, 4], [3, 4, 6], [3, 4, 12], [3, 5, 5], [3, 6, 6], [3, 6, 18], [3, 8, 8], [3, 8, 24], [3, 10, 30],
  [3, 12, 12], [4, 4, 4], [4, 4, 5], [4, 4, 6], [4, 4, 9], [4, 5, 5], [4, 6, 6], [4, 8, 8], [4, 16, 16],
  [5, 5, 5], [5, 5, 10], [5, 5, 15], [5, 10, 10], [6, 6, 6], [6, 12, 12], [6, 24, 24], [7, 7, 7], [8, 8, 8],
  [9, 9, 9], [9, 18, 18], [12, 12, 12], [15, 15, 15]
];


arithmetic2 := [
  [2, 3, 13], [2, 3, 15], [2, 3, 17], [2, 3, 20], [2, 3, 21], [2, 3, 22], [2, 3, 26], [2, 3, 28], [2, 3, 36],
  [2, 3, 40], [2, 3, 42], [2, 3, 60], [2, 4, 9], [2, 4, 11], [2, 4, 14], [2, 4, 15], [2, 4, 16], [2, 4, 20],
  [2, 4, 24], [2, 4, 30], [2, 4, 42], [2, 5, 7], [2, 5, 9], [2, 5, 12], [2, 5, 15], [2, 5, 60], [2, 6, 7],
  [2, 6, 9], [2, 6, 10], [2, 6, 14], [2, 6, 18], [2, 6, 20], [2, 6, 30], [2, 7, 8], [2, 7, 12], [2, 7, 21],
  [2, 7, 28], [2, 8, 12], [2, 8, 24], [2, 9, 9], [2, 9, 12], [2, 9, 36], [2, 10, 12], [2, 10, 20], [2, 10, 30],
  [2, 11, 11], [2, 11, 22], [2, 13, 26], [2, 14, 14], [2, 14, 28], [2, 15, 15], [2, 16, 16], [2, 18, 36], [2, 20, 20],
  [2, 20, 40], [2, 21, 42], [2, 24, 24], [2, 30, 30], [2, 30, 60], [2, 42, 42], [3, 3, 10], [3, 3, 11], [3, 3, 13],
  [3, 3, 14], [3, 3, 18], [3, 3, 20], [3, 3, 21], [3, 3, 30], [3, 4, 5], [3, 4, 7], [3, 4, 8], [3, 4, 9],
  [3, 4, 10], [3, 4, 20], [3, 4, 28], [3, 4, 36], [3, 5, 6], [3, 5, 7], [3, 5, 9], [3, 5, 10], [3, 5, 15],
  [3, 7, 7], [3, 7, 21], [3, 9, 9], [3, 10, 10], [3, 12, 36], [3, 14, 14], [3, 14, 42], [3, 18, 18], [3, 20, 20],
  [3, 20, 60], [3, 30, 30], [4, 4, 7], [4, 4, 8], [4, 4, 10], [4, 4, 12], [4, 4, 15], [4, 4, 21], [4, 5, 6],
  [4, 5, 10], [4, 5, 12], [4, 6, 8], [4, 6, 10], [4, 6, 12], [4, 7, 7], [4, 8, 24], [4, 10, 20], [4, 12, 12],
  [4, 24, 24], [5, 5, 6], [5, 5, 30], [5, 6, 6], [5, 6, 10], [5, 8, 40], [5, 12, 12], [5, 20, 20], [5, 30, 30],
  [6, 6, 7], [6, 6, 9], [6, 6, 10], [6, 6, 15], [6, 7, 7], [6, 8, 8], [6, 9, 9], [6, 10, 10], [7, 7, 14],
  [7, 14, 14], [7, 14, 42], [7, 28, 28], [8, 8, 12], [8, 16, 16], [9, 9, 18], [9, 36, 36], [10, 10, 10], [10, 10, 15],
  [10, 20, 20], [10, 40, 40], [11, 11, 11], [12, 24, 24], [13, 13, 13], [14, 14, 14], [15, 30, 30], [15, 60, 60], [18, 18, 18],
  [20, 20, 20], [21, 21, 21], [21, 42, 42], [30, 30, 30]
];

arithmetic3 := [
  [2, 3, 19], [2, 3, 23], [2, 3, 27], [2, 3, 32], [2, 3, 34], [2, 3, 38], [2, 3, 48], [2, 3, 50], [2, 3, 54],
  [2, 3, 66], [2, 4, 13], [2, 4, 22], [2, 4, 26], [2, 4, 28], [2, 4, 36], [2, 5, 14], [2, 5, 16], [2, 5, 18],
  [2, 6, 11], [2, 6, 15], [2, 6, 16], [2, 6, 24], [2, 7, 9], [2, 7, 10], [2, 7, 42], [2, 8, 9], [2, 8, 10],
  [2, 8, 18], [2, 9, 10], [2, 10, 15], [2, 12, 36], [2, 12, 48], [2, 13, 13], [2, 16, 32], [2, 17, 34], [2, 19, 38],
  [2, 22, 22], [2, 24, 48], [2, 25, 50], [2, 26, 26], [2, 27, 54], [2, 28, 28], [2, 33, 66], [2, 36, 36], [3, 3, 16],
  [3, 3, 17], [3, 3, 19], [3, 3, 24], [3, 3, 25], [3, 3, 27], [3, 3, 33], [3, 6, 8], [3, 6, 10], [3, 6, 12],
  [3, 6, 30], [3, 7, 9], [3, 9, 18], [3, 9, 27], [3, 11, 11], [3, 15, 15], [3, 16, 16], [3, 16, 48], [3, 18, 54],
  [3, 22, 66], [3, 24, 24], [4, 4, 11], [4, 4, 13], [4, 4, 14], [4, 4, 18], [4, 5, 20], [4, 6, 36], [4, 9, 9],
  [4, 10, 10], [4, 12, 18], [4, 14, 28], [4, 18, 18], [5, 5, 7], [5, 5, 8], [5, 5, 9], [5, 6, 30], [5, 7, 7],
  [5, 8, 8], [5, 9, 9], [5, 10, 30], [5, 15, 15], [6, 6, 8], [6, 6, 12], [6, 8, 24], [6, 9, 18], [6, 15, 30],
  [6, 36, 36], [6, 48, 48], [7, 7, 21], [8, 8, 9], [8, 12, 24], [8, 32, 32], [10, 15, 30], [11, 22, 22], [12, 12, 18],
  [12, 12, 24], [12, 48, 48], [13, 26, 26], [14, 28, 28], [16, 16, 16], [17, 17, 17], [18, 36, 36], [19, 19, 19], [24, 24, 24],
  [25, 25, 25], [27, 27, 27], [33, 33, 33]
];

addArithmetic := function(L)
  N := [];
  for t in L do
    if [t[1],t[2],t[3]] in arithmetic1 then
      Append(~N,[t[1],t[2],t[3],t[4],t[5],t[6],1]);
    elif [t[1],t[2],t[3]] in arithmetic2 then
      print "here";
      Append(~N,[t[1],t[2],t[3],t[4],t[5],t[6],2]);
    elif [t[1],t[2],t[3]] in arithmetic3 then
      Append(~N,[t[1],t[2],t[3],t[4],t[5],t[6],3]);
    else
      Append(~N,[t[1],t[2],t[3],t[4],t[5],t[6],5000]);
    end if;
  end for;
  return N;
end function;

goodFormat := function(list)
  return texFormat(addBound(addArithmetic(lexOrderABC(list))));
end function;
